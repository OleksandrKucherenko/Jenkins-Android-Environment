<?xml version="1.0" encoding="UTF-8"?>
<project>

  <!-- quick check on sdk.dir & tools.dir -->
  <fail message="sdk.dir is missing." unless="sdk.dir" />
  <fail message="tools.dir is missing." unless="tools.dir" />

  <!-- Load tools configuration -->
  <property file="${tools.dir}/tools.properties" />

  <!-- 
  ================================= 
    Short overview of build steps 
  ================================= 
  -->
  
  <echo>-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</echo>
  <echo>Custom Rules: Build customization</echo>
  <echo>-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</echo>

  <target name="help">
    <echo>Allowed redefine of targets:</echo>
    <echo>-PRE-                         -POST-</echo>
    <echo>-pre-clean</echo>
    <echo>-pre-build</echo>
    <echo>-pre-compile</echo>
    <echo>                              -post-compile</echo>
    <echo>                              -post-package</echo>
    <echo>                              -post-build</echo>
    <echo>-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</echo>
  </target>
  
  <!--
  ================================= 
    target: -resolve-variables / Resolve critical to project variables
  ================================= 
  -->
  
  <target name="-resolve-variables">
    <echo>Resolving Build Target for ${ant.project.name}...</echo>
    <!-- load project properties, resolve Android target, library dependencies
    and set some properties with the results.
    All property names are passed as parameters ending in -Out -->
    <gettarget
      androidJarFileOut="project.target.android.jar"
      androidAidlFileOut="project.target.framework.aidl"
      bootClassPathOut="project.target.class.path"
      targetApiOut="project.target.apilevel"
      minSdkVersionOut="project.minSdkVersion" />
    
    <echo>Resolving Dependencies for ${ant.project.name}...</echo>
    <dependency
      libraryFolderPathOut="project.library.folder.path"
      libraryPackagesOut="project.library.packages"
      libraryManifestFilePathOut="project.library.manifest.file.path"
      libraryResFolderPathOut="project.library.res.folder.path"
      libraryBinAidlFolderPathOut="project.library.bin.aidl.folder.path"
      libraryRFilePathOut="project.library.bin.r.file.path"
      libraryNativeFolderPathOut="project.library.native.folder.path"
      jarLibraryPathOut="project.all.jars.path"
      targetApi="${project.target.apilevel}"
      renderscriptSupportMode="${renderscript.support.mode}"
      buildToolsFolder="${android.build.tools.dir}"
      renderscriptSupportLibsOut="project.rs.support.libs.path"
      verbose="${verbose}" />
  </target>
  
  <!-- 
  ================================= 
    INCLUDE CUSTOME TARGETS 
  ================================= 
  -->
  
  <import file="custom_rules_annotations.xml" optional="true" />
  <import file="custom_rules_findbugs.xml" optional="true" />
  <import file="custom_rules_checkstyle.xml" optional="true" />
  <import file="custom_rules_javadoc.xml" optional="true" />
  <import file="custom_rules_pmd.xml" optional="true" />
  <import file="custom_rules_javancss.xml" optional="true" />
  <import file="custom_rules_jcsc.xml" optional="true" />
  <import file="custom_rules_manifest.xml" optional="true" />
  <import file="custom_rules_crashlytics.xml" optional="true" />

  <!--
  ================================= 
    target: -pre-clean
  ================================= 
  -->
  
  <target name="-pre-clean">
  </target>
  
  <!--
  ================================= 
    target: -pre-build
  ================================= 
  -->
  
  <target name="-pre-build" depends="crashlytics-pre-build">
    <!-- antcall target="crashlytics-pre-build"/ -->
  </target>

  <!-- 
  ================================= 
    target: -pre-compile / ASK ANNOTAIONS TARGET TO DO THE JOB FOR US.          
  =================================
  -->
  
  <target name="-pre-compile">
    <!-- request android annotations build step --> 
    <antcall target="annotations"/>
  </target>


  <!--
    Override Android's -code-gen target to first invoke the Crashlytics code-gen target.
  -->
  <target name="-code-gen" depends="crashlytics-code-gen, android_rules.-code-gen" />
 
  <!--
  ================================= 
    target: -post-compile
  =================================
  -->
  <target name="-post-compile">
    <!--
    <antcall target="lint"/>
    <antcall target="pmd"/>
    <antcall target="javancss"/>
    <antcall target="jcsc"/>
    <antcall target="findbugs"/>
    <antcall target="checkstyle"/>
    <antcall target="javadoc"/>
    -->
  </target>
  
  <!--
  ================================= 
    target: -post-package / Define custom sign certificate
  =================================
  -->

  <target name="-post-package" depends="set-project-name, crashlytics-post-package">

    <!-- antcall target="crashlytics-post-package"/ -->

    <echo>POST-Package step</echo>
    <echo>-----------------</echo>
    <echo>Keystore         : ${key.store}</echo>
    <echo>Key Alias        : ${key.alias}</echo>
    <echo>File Name        : ${ant.project.name}</echo>
    <echo>Output file      : ${out.final.file}</echo>
    <echo>Build Target     : ${build.target}</echo>
    <echo>Path separator   : ${file.separator}</echo>
    
    <var name="out.final.file" value="${out.absolute.dir}${file.separator}${ant.project.name}-${build.target}.apk" />
    <echo>New Output file  : ${out.final.file}</echo>
    
    <!-- for DEBUG builds is possible defined custom sign key -->
    <antcall target="-do-debug-sign"/>
  </target>

  <target name="-do-debug-sign" if="has.keystore" unless="build.is.mode.release">
    <echo>Custom debug key is used for signing the APK</echo>
    <!-- only create apk if *not* a library project -->
    <do-only-if-not-library elseText="Library project: do not create apk..." >
        <sequential>
            <property name="out.unaligned.file" location="${out.absolute.dir}/${ant.project.name}-release-unaligned.apk" />

            <!-- Signs the APK -->
            <echo level="info">Signing final DEBUG apk...</echo>
            <signapk
                    input="${out.packaged.file}"
                    output="${out.unaligned.file}"
                    keystore="${key.store}"
                    storepass="${key.store.password}"
                    alias="${key.alias}"
                    keypass="${key.alias.password}"/>

            <!-- Zip aligns the APK -->
            <zipalign-helper
                    in.package="${out.unaligned.file}"
                    out.package="${out.final.file}" />
            <echo level="info">Release Package: ${out.final.file}</echo>
        </sequential>
    </do-only-if-not-library>

    <record-build-info />
  </target>
  
  <!--
  ================================= 
    target: -post-build
  ================================= 
  -->
  
  <target name="-post-build">
    <!-- Debugging helpers, uncomment to see more debug info -->
    <echoproperties/>
  </target>
  
</project>